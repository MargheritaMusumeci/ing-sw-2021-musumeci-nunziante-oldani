Musumeci:
- leggere le LeaderCard dal file e crearle --> GSON

Nunziante:
- in PopeTrack capire come fare l'aggiornamento su tutti i player  -> checkGamerPosition() in PopeTrack,
    ma il controller deve capire se il player ha raggiunto o superato la popeSection
- in Player ho aggiunto boolean[] hasLeaderBeenDiscard invece di usare solo hasLeaderBeenUsed altrimenti nei turni successivi non so se la
    carta leader è stata usata e quindi ha il suo potere attivo o se la carta è stata scartata


Oldani:
- Leggere le carte dal file e crearle --> GSON
    --> da testare una volta finito il json

- modificare la signature di updateMarket nell'uml
- aggiunfere il get del market board nell'uml
- sistemare uml --> product è products nelle productionCards
- aggiunto metodo per prendere una carta dalla evolutionsection in una data posizione
- aggiunto signleton per il market --> aggiornare uml
- aggiunto singleton per la EvolutionSection --> aggiornare UMl

- a market aggiunto il metodo get per la externalResource
- Class Market testata.



Generali:

- pensare al controller --> UML
- scrivere insieme il game --> decidere come sistemare la sitazione lorezoPlayer
- fare test delle classi implementare
- aggiornare UML


Richieste di matteoNunz:
- sistemare in ProductionZone getCard : position
- non sono sicuro di aver capito come è fatta la singola production zone, secondo me voi non vi siete capiti
- sempre in production zone mi sarebbe più comodo se le posizioni andassero da 0 a 2 al posto che da 1 a 3,
    poi ditemi voi




DOMANDE TUTORATO:

- Creare nel controller la classe SoloGameHandler che in caso di sologame gestisca le mosse di un ipotetico lorenzo usando le action card
  e usando gli oggetti di game (market e le evolutionCardSection)
  Metterà l'active player a null durante la computazione
  Aggiorna posizoone pope track di lorenzo

- Dobbiamo gestire gli eventuali errori (parametri non validi arrivati al model/controller)
  con exception o ci sono altri modi consiglaiti? Chi gestirà poi tutte le exception?

- Posso scegliere dove mettere le risorse appena comprate a magazzino vuoto o vanno messe in automatico? ( su slack ci sono rispsote constrastanti)

- Dove parte il gioco? Chi sarà in grado di gestire l'inizio una volta che i player sono collegati al server? Il controller?

- Come lavorare con gli optional su json (GSON)? :(((((

- E' errato restituire un valore per riferimento e non per copia anche se l'attributo è privato e
  non esistono metodi setter della classe in questione?

- Devo testare anche i metodi get e in quel caso cosa dovrei fare? Quale è la verifica che viene imposta?
- Devo testare che tutte le carte caricate nela evolutionSection dal json siano caricate giuste o basta verificare che una di quelle caricate sia corretta?





RISPOSTE TUTORATO:

- I controlli sulla validità dei parametri dove li devo fare? Noi li faremmo nel controller
        Vanno fatti nel model


- Nelle EvolutionCard le tipologie di risorse per requirements, products e cost sono mappate intrinsecamente dentro l'array
    che le contiene come //rock, shield, coin, servant, faith. Può esseere un problema?
        user un hashmap {resource, valore}

- se va bene il metodo di creazione delle carte da parte di file
        usare la libreiria gson



